
3_BSRR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003c0  080003c0  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003c0  080003c0  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000013c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003c4  080003c4  000013c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080003c8  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003cc  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003cc  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001271  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004f7  00000000  00000000  000032a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  000037a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000013e  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b71  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002249  00000000  00000000  00017617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e135  00000000  00000000  00019860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000550  00000000  00000000  000979d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00097f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003a8 	.word	0x080003a8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	080003a8 	.word	0x080003a8

080001d4 <delay>:


#define GPIOAEN (1U<<0)
#define PIN5 (1U<<5)
#define LED_PIN PIN5
void delay(volatile unsigned int time) {
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
    while (time--) {
 80001dc:	e009      	b.n	80001f2 <delay+0x1e>
        for (volatile int i = 0; i < 1000; i++) {
 80001de:	2300      	movs	r3, #0
 80001e0:	60fb      	str	r3, [r7, #12]
 80001e2:	e002      	b.n	80001ea <delay+0x16>
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	3301      	adds	r3, #1
 80001e8:	60fb      	str	r3, [r7, #12]
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80001f0:	dbf8      	blt.n	80001e4 <delay+0x10>
    while (time--) {
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	1e5a      	subs	r2, r3, #1
 80001f6:	607a      	str	r2, [r7, #4]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d1f0      	bne.n	80001de <delay+0xa>
            // just waste time
        }
    }
}
 80001fc:	bf00      	nop
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
	...

0800020c <main>:


int main(void){
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
RCC->AHB1ENR|=GPIOAEN;
 8000210:	4b11      	ldr	r3, [pc, #68]	@ (8000258 <main+0x4c>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000214:	4a10      	ldr	r2, [pc, #64]	@ (8000258 <main+0x4c>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6313      	str	r3, [r2, #48]	@ 0x30

GPIOA->MODER|=(1U<<10);
 800021c:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <main+0x50>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0e      	ldr	r2, [pc, #56]	@ (800025c <main+0x50>)
 8000222:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000226:	6013      	str	r3, [r2, #0]
GPIOA->MODER&=~(1U<<11);
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <main+0x50>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0b      	ldr	r2, [pc, #44]	@ (800025c <main+0x50>)
 800022e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000232:	6013      	str	r3, [r2, #0]
while(1){


	GPIOA->BSRR=PIN5;
 8000234:	4b09      	ldr	r3, [pc, #36]	@ (800025c <main+0x50>)
 8000236:	2220      	movs	r2, #32
 8000238:	619a      	str	r2, [r3, #24]

	delay(2000);
 800023a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800023e:	f7ff ffc9 	bl	80001d4 <delay>

	GPIOA->BSRR=(1U<<21);
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <main+0x50>)
 8000244:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000248:	619a      	str	r2, [r3, #24]
	delay(2000);
 800024a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800024e:	f7ff ffc1 	bl	80001d4 <delay>
	GPIOA->BSRR=PIN5;
 8000252:	bf00      	nop
 8000254:	e7ee      	b.n	8000234 <main+0x28>
 8000256:	bf00      	nop
 8000258:	40023800 	.word	0x40023800
 800025c:	40020000 	.word	0x40020000

08000260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <NMI_Handler+0x4>

08000268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800026c:	bf00      	nop
 800026e:	e7fd      	b.n	800026c <HardFault_Handler+0x4>

08000270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000274:	bf00      	nop
 8000276:	e7fd      	b.n	8000274 <MemManage_Handler+0x4>

08000278 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000278:	b480      	push	{r7}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800027c:	bf00      	nop
 800027e:	e7fd      	b.n	800027c <BusFault_Handler+0x4>

08000280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000284:	bf00      	nop
 8000286:	e7fd      	b.n	8000284 <UsageFault_Handler+0x4>

08000288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr

08000296 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b6:	f000 f83f 	bl	8000338 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002ba:	bf00      	nop
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002c4:	4b06      	ldr	r3, [pc, #24]	@ (80002e0 <SystemInit+0x20>)
 80002c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ca:	4a05      	ldr	r2, [pc, #20]	@ (80002e0 <SystemInit+0x20>)
 80002cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000ed00 	.word	0xe000ed00

080002e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800031c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80002e8:	f7ff ffea 	bl	80002c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80002ec:	480c      	ldr	r0, [pc, #48]	@ (8000320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002ee:	490d      	ldr	r1, [pc, #52]	@ (8000324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f4:	e002      	b.n	80002fc <LoopCopyDataInit>

080002f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fa:	3304      	adds	r3, #4

080002fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000300:	d3f9      	bcc.n	80002f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000302:	4a0a      	ldr	r2, [pc, #40]	@ (800032c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000304:	4c0a      	ldr	r4, [pc, #40]	@ (8000330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000308:	e001      	b.n	800030e <LoopFillZerobss>

0800030a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800030c:	3204      	adds	r2, #4

0800030e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000310:	d3fb      	bcc.n	800030a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000312:	f000 f825 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000316:	f7ff ff79 	bl	800020c <main>
  bx  lr    
 800031a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800031c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000324:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000328:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 800032c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000330:	20000024 	.word	0x20000024

08000334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000334:	e7fe      	b.n	8000334 <ADC_IRQHandler>
	...

08000338 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <HAL_IncTick+0x20>)
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	461a      	mov	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	@ (800035c <HAL_IncTick+0x24>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4413      	add	r3, r2
 8000348:	4a04      	ldr	r2, [pc, #16]	@ (800035c <HAL_IncTick+0x24>)
 800034a:	6013      	str	r3, [r2, #0]
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000
 800035c:	20000020 	.word	0x20000020

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	4d0d      	ldr	r5, [pc, #52]	@ (8000398 <__libc_init_array+0x38>)
 8000364:	4c0d      	ldr	r4, [pc, #52]	@ (800039c <__libc_init_array+0x3c>)
 8000366:	1b64      	subs	r4, r4, r5
 8000368:	10a4      	asrs	r4, r4, #2
 800036a:	2600      	movs	r6, #0
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	4d0b      	ldr	r5, [pc, #44]	@ (80003a0 <__libc_init_array+0x40>)
 8000372:	4c0c      	ldr	r4, [pc, #48]	@ (80003a4 <__libc_init_array+0x44>)
 8000374:	f000 f818 	bl	80003a8 <_init>
 8000378:	1b64      	subs	r4, r4, r5
 800037a:	10a4      	asrs	r4, r4, #2
 800037c:	2600      	movs	r6, #0
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
