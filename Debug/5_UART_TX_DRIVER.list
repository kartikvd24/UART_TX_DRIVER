
5_UART_TX_DRIVER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000458  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000458  08000458  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000458  08000458  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00001458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800045c  0800045c  0000145c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000460  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000464  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000464  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001361  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000545  00000000  00000000  00003395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  000038e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00003ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013b89  00000000  00000000  00003c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022df  00000000  00000000  0001779a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e1a3  00000000  00000000  00019a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00097c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b8  00000000  00000000  00097c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  00098218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000440 	.word	0x08000440

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000440 	.word	0x08000440

080001d4 <uart_set_baudrate>:
#define SR_TXE (1U<<7)
static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate);
void UART2_TX_INIT(void);
void uart2_write(int ch);
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate);
static  void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t Perif_clk,uint32_t Baudrate){
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b084      	sub	sp, #16
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
	USARTx->BRR=compute_uart_div(Perif_clk,Baudrate);
 80001e0:	6879      	ldr	r1, [r7, #4]
 80001e2:	68b8      	ldr	r0, [r7, #8]
 80001e4:	f000 f808 	bl	80001f8 <compute_uart_div>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	609a      	str	r2, [r3, #8]
}
 80001f0:	bf00      	nop
 80001f2:	3710      	adds	r7, #16
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bd80      	pop	{r7, pc}

080001f8 <compute_uart_div>:




//calculate the baud rate 0
static uint16_t compute_uart_div(uint32_t Perif_clk,uint32_t Baudrate){
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
	return ((Perif_clk +(Baudrate/2U))/Baudrate);
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	085a      	lsrs	r2, r3, #1
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	441a      	add	r2, r3
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000210:	b29b      	uxth	r3, r3

}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <UART2_TX_INIT>:



void UART2_TX_INIT(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	/*************congiure uart gpio pin*************/
	//enable clock to gpioa
	RCC->AHB1ENR|=GPIOAEN;
 8000224:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <UART2_TX_INIT+0x88>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000228:	4a1f      	ldr	r2, [pc, #124]	@ (80002a8 <UART2_TX_INIT+0x88>)
 800022a:	f043 0301 	orr.w	r3, r3, #1
 800022e:	6313      	str	r3, [r2, #48]	@ 0x30
	//set pa2 to alternate function mode
	GPIOA->MODER|=(1U<<5);
 8000230:	4b1e      	ldr	r3, [pc, #120]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a1d      	ldr	r2, [pc, #116]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000236:	f043 0320 	orr.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(1U<<4);
 800023c:	4b1b      	ldr	r3, [pc, #108]	@ (80002ac <UART2_TX_INIT+0x8c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1a      	ldr	r2, [pc, #104]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000242:	f023 0310 	bic.w	r3, r3, #16
 8000246:	6013      	str	r3, [r2, #0]
	//set pa2 alternate function type to UART_TX(AF07)
	GPIOA->AFR[0]|=(1U<<8);//for afrl low arf[0] and for afr high arf[1]
 8000248:	4b18      	ldr	r3, [pc, #96]	@ (80002ac <UART2_TX_INIT+0x8c>)
 800024a:	6a1b      	ldr	r3, [r3, #32]
 800024c:	4a17      	ldr	r2, [pc, #92]	@ (80002ac <UART2_TX_INIT+0x8c>)
 800024e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000252:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<9);
 8000254:	4b15      	ldr	r3, [pc, #84]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000256:	6a1b      	ldr	r3, [r3, #32]
 8000258:	4a14      	ldr	r2, [pc, #80]	@ (80002ac <UART2_TX_INIT+0x8c>)
 800025a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800025e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|=(1U<<10);
 8000260:	4b12      	ldr	r3, [pc, #72]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000262:	6a1b      	ldr	r3, [r3, #32]
 8000264:	4a11      	ldr	r2, [pc, #68]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800026a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~(1U<<11);
 800026c:	4b0f      	ldr	r3, [pc, #60]	@ (80002ac <UART2_TX_INIT+0x8c>)
 800026e:	6a1b      	ldr	r3, [r3, #32]
 8000270:	4a0e      	ldr	r2, [pc, #56]	@ (80002ac <UART2_TX_INIT+0x8c>)
 8000272:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000276:	6213      	str	r3, [r2, #32]



	/*configure uart module*/
	//enable clock  to uart2
	RCC->APB1ENR|=UART_EN;
 8000278:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <UART2_TX_INIT+0x88>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027c:	4a0a      	ldr	r2, [pc, #40]	@ (80002a8 <UART2_TX_INIT+0x88>)
 800027e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000282:	6413      	str	r3, [r2, #64]	@ 0x40
	//configure baud rate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUD_RATE);
 8000284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000288:	4909      	ldr	r1, [pc, #36]	@ (80002b0 <UART2_TX_INIT+0x90>)
 800028a:	480a      	ldr	r0, [pc, #40]	@ (80002b4 <UART2_TX_INIT+0x94>)
 800028c:	f7ff ffa2 	bl	80001d4 <uart_set_baudrate>
	//configure the transfer direction
	USART2->CR1 =CR1_TE;
 8000290:	4b08      	ldr	r3, [pc, #32]	@ (80002b4 <UART2_TX_INIT+0x94>)
 8000292:	2208      	movs	r2, #8
 8000294:	60da      	str	r2, [r3, #12]
	USART2->CR1|=(1U<<13);
 8000296:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <UART2_TX_INIT+0x94>)
 8000298:	68db      	ldr	r3, [r3, #12]
 800029a:	4a06      	ldr	r2, [pc, #24]	@ (80002b4 <UART2_TX_INIT+0x94>)
 800029c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002a0:	60d3      	str	r3, [r2, #12]
	//enable uart module
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000
 80002b0:	00f42400 	.word	0x00f42400
 80002b4:	40004400 	.word	0x40004400

080002b8 <uart2_write>:


void uart2_write(int ch){
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
	//make sure the transmit data register is empty
	while(!(USART2->SR & SR_TXE)){}
 80002c0:	bf00      	nop
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <uart2_write+0x2c>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d0f9      	beq.n	80002c2 <uart2_write+0xa>
	//write to transmit data register
	USART2->DR = ch & 0xff;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <uart2_write+0x2c>)
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	6053      	str	r3, [r2, #4]

}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40004400 	.word	0x40004400

080002e8 <main>:

int main(){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	UART2_TX_INIT();
 80002ec:	f7ff ff98 	bl	8000220 <UART2_TX_INIT>

	while(1){
		uart2_write('N');
 80002f0:	204e      	movs	r0, #78	@ 0x4e
 80002f2:	f7ff ffe1 	bl	80002b8 <uart2_write>
 80002f6:	e7fb      	b.n	80002f0 <main+0x8>

080002f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <NMI_Handler+0x4>

08000300 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <HardFault_Handler+0x4>

08000308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <MemManage_Handler+0x4>

08000310 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000314:	bf00      	nop
 8000316:	e7fd      	b.n	8000314 <BusFault_Handler+0x4>

08000318 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <UsageFault_Handler+0x4>

08000320 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800032e:	b480      	push	{r7}
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000332:	bf00      	nop
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr

0800033c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr

0800034a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800034a:	b580      	push	{r7, lr}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800034e:	f000 f83f 	bl	80003d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800035c:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <SystemInit+0x20>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000362:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <SystemInit+0x20>)
 8000364:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	e000ed00 	.word	0xe000ed00

0800037c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800037c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000380:	f7ff ffea 	bl	8000358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000386:	490d      	ldr	r1, [pc, #52]	@ (80003bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000388:	4a0d      	ldr	r2, [pc, #52]	@ (80003c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800038c:	e002      	b.n	8000394 <LoopCopyDataInit>

0800038e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800038e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000392:	3304      	adds	r3, #4

08000394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000398:	d3f9      	bcc.n	800038e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800039c:	4c0a      	ldr	r4, [pc, #40]	@ (80003c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003a0:	e001      	b.n	80003a6 <LoopFillZerobss>

080003a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003a4:	3204      	adds	r2, #4

080003a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003a8:	d3fb      	bcc.n	80003a2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80003aa:	f000 f825 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003ae:	f7ff ff9b 	bl	80002e8 <main>
  bx  lr    
 80003b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80003b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003bc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003c0:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003c4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003c8:	20000024 	.word	0x20000024

080003cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003cc:	e7fe      	b.n	80003cc <ADC_IRQHandler>
	...

080003d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <HAL_IncTick+0x20>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	461a      	mov	r2, r3
 80003da:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <HAL_IncTick+0x24>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4413      	add	r3, r2
 80003e0:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <HAL_IncTick+0x24>)
 80003e2:	6013      	str	r3, [r2, #0]
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	20000000 	.word	0x20000000
 80003f4:	20000020 	.word	0x20000020

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	@ (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	@ (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
